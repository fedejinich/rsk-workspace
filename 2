
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.18;

contract PrivateBallot {
    
    string public cause;
    mapping(address => Proposal) private proposals;
    mapping(address => bytes32) private votes;
    // uint duration; todo(fedejinich) add this feature

    struct Proposal {
        string proposal;
        bool exists;
    }

    event NewProposal(address, string);

    function addProposal(string memory p) public {
        Proposal prop = Proposal(p, true);
        this.proposals[msg.address] = prop;

        emit NewProposal(msg.address, prop); 
    }

    function vote(uint ballotIndex_, uint optionIndex_) external {
        require(
            !hasVoted[ballotIndex_][msg.sender],
            "Address already casted a vote for ballot"
        );
        Ballot memory ballot = _ballots[ballotIndex_];
        require(
            block.timestamp >= ballot.startTime,
            "Can't cast before start time"
        );
        require(
            block.timestamp < ballot.startTime + ballot.duration,
            "Can't cast after end time"
        );
        _tally[ballotIndex_][optionIndex_]++;
        hasVoted[ballotIndex_][msg.sender] = true;
    }

    function countVotes(
        uint ballotIndex_,
        uint optionIndex_
    ) external view returns (uint[] memory) {
        return _tally[ballotIndex_][optionIndex_];
    }

    function winners() external view returns (uint) {
        return winner;
    }
}
